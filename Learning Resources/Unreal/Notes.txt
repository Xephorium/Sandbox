
//////////////////////////////
/// Learning Unreal Engine ///
//////////////////////////////

02.07.2021

Things Unreal Already Does Better Than Unity
- First/third person movement WITH physics-enabled object collisions!
- Instant (usable) controller support
- Elevator physics
- Multiplayer support (SO much better holy shit)

Basic Project Structure
- Blueprint
  > An object and it's associated code! Basically a Unity prefab. Difference is that a
    Blueprint has one associated code class, which you can change in the EventGraph.
- Level/Map
  > A game world.
  > Consists of a map, player(s), and scripted game events.
  > Basic logic of level can be added/altered through Blueprints > Open Level Blueprint.
- Game Instance
  > Persistent across entire game session. (Including loading new levels.)
  > Global! (Accessable from all Blueprints)
  > Useful for both local and networked games.
  > Meant for highest level config (Player login, session data, etc)
- Game Mode
  > Which character class player controls, game-specific HUD, etc. Basically config of the gametype
    being played. Also tracks scores/points/whatever.
  > Multiplayer: Runs on server. God class that keeps track of "match" info. (ie. Slayer time/score)
  > In both cases, the Game Mode is meant to encapsulate game rules and state.
  > Resets with new level load?
- Game State
  > Multiplayer! Runs on client. Local state class that's updated in real time by GameMode class.
  > Responds to updates by changing things on client. (UI, player loc, world state, etc.)


02.08.2021

Widget Blueprint
- A chunk of UI, which has a lifecycle and can be scripted. Ranges in scale from an entire
  menu screen to a button which another Widget Blueprint can add to its own list.
- Designer: Visualization of the Widget Blueprint's layout.
- Graph: Nodes representing the WB's lifecycle and logic.
  > Event Construct: Beginning of lifecycle. Can be used to grab references.


02.11.2021

In the last few days, I've learned how to setup menus and how we'll eventually give them controller
support. The learning in those areas is almost done. In the interest of forward momentum, I won't
let myself get too drawn into perfecting what were always intended to be prototypes. Today, my
goal will be to finish the Menu test project by setting it up to launch a first person level with
KBM. Then, that framework can serve as the starting point for network integration.

Menu Lessons
- Focus is fickle! To consistently register both keypresses and UI item interactions in a Widget:
  > After adding widget to viewport in GameInstance, call "Set Input Mode Game And UI".
  > In Widget, set keyboard focus to self (Widget) whenever "Event On Focus Lost" is fired.
  > Set all buttons (or other interatctive components) not focusable.


02.14.2021

Setting a Packaged (built) game's default resolution and fullscreen settings:
- Go to <build folder>\WindowsNoEditor\Sandbox\Saved\Config\WindowsNoEditor
- Open "GameUserSettings.ini"
- Change ResolutionSizeX, ResolutionSizeY, and FullscreenMode to the desired values.
  Note: FullscreenMode --> (0: Fullscreen, 1, Borderless, 2: Windowed)


02.20.2021

Networking
- Enabling Steam Online Subsystem:
  0. Setup Guide: https://docs.unrealengine.com/en-US/ProgrammingAndScripting/Online/Steam/index.html
  1. Enable plugin from Edit > Plugins
  2. Visual Studio 2019 must be installed with the "C++ toolchain"
  3. Appropriate DLL's must be copied from Steam folder to Unreal folder (see guide)
  4. Add appripriate lines to DefaultEngine.ini (see guide)
  5. Add steam_appid.txt (see guide)
- Enabling Advanced Sessions Plugin:
  0. https://forums.unrealengine.com/community/community-content-tools-and-tutorials/41043-advanced-sessions-plugin
  1. Download two package folders, move folders to <Project Directory>/Plugins/AdvancedSessions. (Put both in that dir.)
  2. Create blank C++ file anywhere in project to force compile of all C++ files. (Then, delete.)
- MUST open a new level set to "listen" while hosting! Kind of an annoyance, but looks
  like there's no way aaround it in Unreal. New Design:

  Start --> [Start] --> Loading (Host) -->  Lobby --> (invite/join) --> [Start] --> Level
                           |                ^
                           |                |
                           v                |
                         Error -> [Retry] --'
                           |
                           v
                       [Offline] --> LocalLobby --> [Start] --> Level


02.22.2021

Networking 2
- Project Classes Revisited
  > Source: https://docs.unrealengine.com/en-US/InteractiveExperiences/Networking/Blueprints/index.html
  > Main Classes
    + GameInstance     - Exist on server & clients. Do not communicate with each other.
    + GameMode         - Exists only on server. Info clients don't need (like server map weapon settings).
    + GameState        - Exists on server & clients. Synced! Place for score replication from server to clients.
                         Contains PlayerArray with PlayerState objects for each connected player.
    + PlayerController - One on client, list on server. Client instance replicated from correct server PC. For
                         conveying events only one player might be aware of, like minimap ping. Resets on level load.
    + PlayerState      - Synced list exists on both server & clients. Good for keeping track of health or kills.
                         Resets on level load.
    + Pawn             - Exists on server & all clients. Game object everyone should know about (fusion coil)
  > Other Notes
    + Replication is one-way. Server to client. To inform the server of changes, a client needs to call a
      replicated "Run on server" event.
    + "Has Authority" node can be used to determine ownership of an "Actor". For our cases, it's greatest use
      will be establishing different logic for the clients and server.
  > Replication settings
    + None       - No replication. Duh.
    + Replicated - Client values automatically updated when server value changes. Client will then see new value
                   on next read.
    + RepNotify  - Client will fire a function whenever the server's value changes. Useful for things that need
                   to be propigated and handled immediately.
  > GameMode vs GameState
    + Source: https://docs.unrealengine.com/en-US/InteractiveExperiences/Framework/GameMode/index.html
    + GameMode (Server only)
      - Handles level transitions!
    + GameState (Synced b/t server and clients)
      - Game duration.
      - Base class of current GameMode.

Sandbox Multiplayer Architecture
- LobbyPlayerController
  > On BeginPlay, every LobbyPlayerController calls the ServerHandlePlayerJoin event on its GameState, which
    (only if running on the server) executes a multicast event ClientHandlePlayerJoin to notify all client
    GameStates that a player has joined the lobby. This works without executing a specific server method
    because the server list keeps it's own replicated list of CharacterControllers. When a new player joins
    the lobby, their CharacterController is automatically created on both the server and client. Pretty cool!

Lessons
- The client GameState cannot be used to trigger events in the server GameState. Any calls will be dropped
  regardless of replication status. To trigger a server event from a client, call a PlayerController event
  set to "run on server", which will then call handle server-side behavior in the server's GameState.


02.24.2021

Lessons
- The AdvancedSessions function RequestSteamFriendInfo is asynchronous! Especially if you're loading the
  player's avater, it's gonna take a second to download the info. Soooo, to keep the server PlayerList
  (which is replicated to clients) up to date requires first calling the method for all players, then
  waiting for the call to complete. A fairly efficient way to do this is via a loop:

    while (notDownloaded)
      delay .1 seconds
      check list for complete data

  However, while loops do not support delay nodes in Unreal (probably wise). So building the loop requires
  use of our own customized while loop, contained in a Macro! It's called CheckOnInterval in the LobbyGameState
  and is pretty damn neat.
- Getting Packaged builds is a little more complicated than I thought. :/ What worked this time:
  1. Delete build GameUserSettings.ini
  2. Add project DefaultGameUserSettings.ini with the following:

      [/Script/Engine.GameUserSettings]
      bUseVSync=True
      ResolutionSizeX=2560
      ResolutionSizeY=1440
      LastUserConfirmedResolutionSizeX=2560
      LastUserConfirmedResolutionSizeY=1440
      WindowPosX=-1
      WindowPosY=-1
      bUseDesktopResolutionForFullscreen=True
      FullscreenMode=0
      LastConfirmedFullscreenMode=0
      Version=5

  3. Package & run the project.
  4. Change DefaultGameUserSettings.ini to fullscreen mode 1 and useDeskResForFullscreen=False
  5. Profit
- Texture2D structs cannot be replicated across the network! For steam Avatars, each client needs
  to independently download the data.


02.24.2021

Old Lobby Network Design: Server GameState notified when player joins/leaves. Server GameState updates
                          PlayerInfoList, sends data to all client GameStates.
New Lobby Network Design: Server GameMode notified when player joins or leaves. Updates server GameState's
                          list of PlayerControllers and tells it clients need to refresh their lists. Server GameState then runs through PlayercontrollerList, firing a custom "execute on owner" event for each PlayerController. Each client PlayerController then asks its corresponding GameState to queue Steam for the name and avatar of each player in the PlayerArray, a built-in, replicated field of the GameState. Once the data is refreshed, it's displayed in a widget on the client. WOO HOO! We're networking!  

Multiplayer Compendium Notes:
  1. Actor: A class which can replicate properties.
  2. Replication must be enabled at both the class and variable level. Only works from server to client! Never
     the other way around.
  3. RPC (Remote Procedure Calls)
       > Event that executes elsewhere. Can be Server > Client, Client > Server, or a group.
  4. Ownership plays a massive role in whether and how RPC's work. In general, an RPC will only fire when
     called from an owning Actor. The client owns its PlayerController (even though the server has a copy).
     The Server owns the GameState (even though each client has a copy). For more info, see pages 58-60 of
     the multiplayer compendium.


03.10.2021

Multiplayer Stuff
  - PlayerControllers should call "Destroy Session" when "Event End Play" is fired. This happens
    whenever the host closes the session. It's also a good idea to create a client event "On Kick" which the host will call when kicking a player. This event should then open the default level (Main Menu, Start, whatever) and destroy the session.
  - In general, when a player leaves lobby: destroy session, open desired level.
  - Event for launching game goes in GameMode.
    > Execute Console Command!
    > "servertravel /Game/Maps/MapName"
    > Also, make sure "Use Seamless Travel" is enabled in GameMode class defaults.


03.11.2021

---- Base Class Architecture ----

GameMode
  LobbyGameMode
  MatchGameMode // Base match GameMode. Includes event "End Game", which return server to lobby.
    FirstPersonGameMode // Child of MatchGameMode. Includes rules specific to First Person games.

GameState
  LobbyGameState
  MatchGameState // Base match GameState.
    FirstPersonGameState // Child of MatchGameState.

PlayerController
  LobbyPlayerController
  MatchPlayerController
    FirstPersonPlayerController


---- Match Lifecycle Events ----

> End Game (Current)
  1. On server, PauseWidget calls SandboxGameInstance event "End Game".
  2. On server, SandboxGameInstance calls MatchGameMode event "End Game".
  3. On server, MatchGameMode initiates a server travel (loads new level).
  4. Clients automatically load lobby level.

> End Game (Desired)
  1. Server - PauseWidget calls MatchPlayerController event "End Match".
  1. Server - MatchPlayerController calls MatchGameMode event "End Match".
  2. Server - MatchGameMode begins 4 second timer, calls the multicast MatchGameState event
              "Handle Match End".
  3. Client - Each MatchGameState calls its client MatchPlayerController's "Handle Match End".
  4. Client - MatchPlayerControllers show MatchEndWidget & wait 5s before showing LoadingWidget.
  5. Server - MatchGameMode timer expires. Initiates a server travel to LobbyLevel.
  6. Client - Automatically begin loading LobbyLevel.
  7. Server - On LobbyLevel load, LobbyGameMode calls multicast LobbyGameState event
              "Handle Lobby Load".
  8. Client - Each LobbyGameState calls its client LobbyPlayerController's "Handle Lobby Load".
  9. Client - LobbyPlayerController clears UI, shows LobbyWidget, & updates playerlist.


---- Main Menu Lifecycle ----

> Start Level
  0. Is default. Loads on engine boot, with accompanying Mode, State, PlayerController.
  1. BeginPlay - StartPlayerController adds StartWidget to view, queues fade in from black.
  2. Space - StartPlayerController fades to black & calls SandboxGameInstance event to load
     LobbyLevel
    A. Host Successful - LobbyLevel loads, LobbyPlayerController takes over.
    B. Host Failire - StartPlayerController event called. Hides LoadingWidget, shows ErrorWidget.

> Lobby Level
  1. 


---- New Architectural Principles ----

1. PlayerController is the driver of each level. Adds/animates/responds to widgets. Triggers
   server events and responds to those events on the client.
2. Widgets should be as stateless as possible. View-layer. Driven by and delegate events to
   PlayerController.



03.12.2021

Lessons
  - Object Initialization Sequence: PlayerController > GameMode > GameState > PlayerState > Level
  - This means it can cause problems to call setup events on the GameState from early in the
    PlayerController's lifecycle. It might not be available! The cast will succeed anyway though,
    which is a nightmare for troubleshooting. This is why the LobbyPlayerController's event
    RefreshPlayerList waits before calling the LobbyGameState's RefreshPlayerList event. The delay ensures the LobbyGameState has been created and replicated.

Fade Speeds
  Slow Fade In   - 2.00s (.5x)
  Normal Fade In - 0.33s (3x)
  Fade Out       - 0.08s (12.5x)


03.15.2021

Input Smoothing:
  > ( ((((sin((((5*x)/3.141590)-(3.141590/2))))+1)/2)*(1/0.510380)) * 0.6) + (x * 0.4)
  > Gradually ramps up strength of input float from [0,1]. Just plot it on WolframAlpha lol
  > Optimized: ((sin(x*1.5915-1.5707)+1)*0.5877)+(x*0.4)


03.16.2021

More Lessons
  1. Enabling the steam overlay/subsystem disables gamepad input for Unreal projects! It
     works in viewport, but doesn't register input when packaged. This is because Steam wants
     you to use their Controller API, which is universal and gives the user advanced control
     of input mapping. That said, the Steam Controller API only works with C++! So, at long last,
     we've arrived at the need to code.
  2. Unreal Course - Converting Blueprints to C++
       - Components: "A type of Object that Actors can attach to themselves as sub-objects. Components are useful for sharing common behaviors, such as the ability to display a visual representation, play sounds. They can also represent project-specific concepts, such as the way a vehicle interprets input and changes its own velocity and orientation. For example, a project with user-controllable cars, aircraft, and boats could implement the differences in vehicle control and movement by changing which Component a vehicle Actor uses."
         > I should be using components for FPS gamepad input translation!
         > Also, maybe for showing widgets?
         > Course example: Grabber component, which allows a player character to grab items in the world.
      - C++ has no awareness of Blueprints! Blueprints can inheret from C++ and actively recompile during development. But, it doesn't go the other way.
         > One exception: Overridden interface functions. If a Blueprint overrides a C++ interface, another C++ class can call its function(s).
      - BP_ prefix is to distinguish between blueprints and their corresponding C++ classes.
      - C++
         > "#pragma" is a compiler pre-process directive. ( https://www.geeksforgeeks.org/pragma-directive-in-c-c/ ). It turns certain C++ features on and off depending what's supported by each compiler. "#pragma once" simply guarantees any header files are included only once to avoid duplicate header content loading.
      - "UCLASS( ... )" is an example of a pre-process directive used to reduce boilerplate! These tags can be added to classes and methods to specify behavior. "UCLASS" specifically uses class specifiers to set properties of an Unreal class like its group and whether it can be referenced in Blurprints.
      - Woah. Apparently making changes in C++ requires closing Unreal, compiling the C++, and reopening Unreal Engine? There'a button to recompile, but the internet says it's notoriously
      glitchy. God I hope this isn't true.
      - Constuctor Call:
         > ComponentTick.bCanEverTick = true; // Determines whether class' tick method is used.
         > Value is overridden with true if Blueprint uses tick event.


03.17.2021

Problem - When trying to open the project in the Unreal Launcher, an error appears:
          "The following modules are missing or built with a different engine version." Clicking
          build results in an error that the project could not be built.
Solution - Component missing. Install new component for "Unreal Games Launcher". Might be under
           "Not finding what you're looking for? Install more tools and features."


04.05.2021

    C++ Notes
      - Basic process for adding new C++ base class:
          1. Rename blueprint SandboxGameInstance to BP_SandboxGameInstance.
          2. Create new C++ class called SandboxGameInstance through the editor, giving it a base
             class of AdvancedFriendsGameInstance.
          3. Set BP_SandboxGameInstance's base class to the new C++ SandboxGameInstance.
          4. Manually update the project's GameInstance in settings. (This looks like it's done
             automatically, but it doesn't work. Idk why. Just set thee GameInstance to something
             else and then to the new BP_SandboxGameInstance.)
          5. BP_SandboxGameInstance can now call C++ functions from its base class!
      - Add new C++ files through the Unreal Editor! Adds all kinds of build configuration and
        makes it not impossible to get imports working properly.
      - Unreal projects use FString class for string management.
      - UFUNCTION(BlueprintCallable) preprocess directive makes a function callable from
        blueprints, with optional parameters! :)


06.18.2021

  Unreal Review
    - Unreal Project built out of Actors (generic objects).
    - Actors built from Components (functionality/mesh/camera).
    - Character is a Pawn with a bunch of default behavior. A Pawn is an Actor that can
      receive inputs from the user. An actor is the basic building block of Unreal!

  C++
    - Function CreateDefaultSubobject() used to create a new component!

      /*--- Header ---*/
      // Declares UStaticMeshComponent object called BulletMesh with approriate editor
      // metadata tags. Class is a modifier that "forward declares" the UStaticMeshComponent
      // class. In other words, we don't need to #include the class in the header because the
      // "class" keyword tells the compiler it will be in the .cpp file.
      UPROPERTY(EditAnywhere, Category="Components")
      class UStaticMeshComponent* BulletMesh;

      /*--- CPP ---*/
      // Creates new StaticMesh component with name "BulletMesh"
      BulletMesh = CreateDefaultSubobject<UStaticMeshComponent>("BulletMesh");

    - Can set root component of actor with method SetRootCoponent(<component object here>);
    - Can create blueprints from C++ classes in the editor too! Kinda like prefabs. Update
      when code changes.
    - Accessing object properties is weird in C++.

      Object.Field = 1.f;  // Normal Coding Language
      Object->Field = 1.f; // C++

    - Logging:

      UE_LOG(LogTemp, Warning, TEXT("Testing testing 123")); // Prints to log file.

    - Referencing Blueprint Actor in CPP:

      /*--- Header ---*/
      // Declares object that subtypes ABullet called BulletBP. "class" keyword is forward
      // declaration of the class so we don't need the import in the header. Now, value can
      // be set in the editor!
      UPROPERTY(EditAnywhere, Category="Shooting")
      TSubclassOf<class ABullet> BulletBP;

    - Spawning actors:

      // Get spawn Transform (location)
      FTransform SpawnTransform = GetActorTransform();
      // Move Location slightly above player (bullet is too big lol)
      SpawnTransform.TransformPosition(FVector(0.f, 0.f, 100.f));

      // Get Spawn Parameters
      // Contains optional initializaton info about the spawned object.
      FActorSpawnParameters SpawnParams;

      // Need reference to world to spawn. Holds all actors. Can call GetWorld method from
      // any actor. "A" prefix means Actor. 
      GetWorld()->SpawnActor<ABullet>(BulletBP, SpawnTransform, SpawnParams);

    - Networked function calls! To run code specifically on the server:

      /*--- Header ---*/
      UFUNCTION(Server, Reliable) // Execute on server, execute reliably
      void ServerShoot();

      /*--- C++ ---*/
      void ALearningCharacter::Shoot() {
          if (Role < ROLE_Authority) {
              // Client!
              ServerShoot();
              return;
          } else if (Role == ROLE_AUTHORITY) {
              // Server!
          }
          // Actual Shoot Code Here
      }
      void ALearningCharacter::ServerShoot_Implementation() {
          Shoot();
      }
